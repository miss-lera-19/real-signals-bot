import os
import time
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from keep_alive import keep_alive

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ====
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = "681357425"
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

coins = {
    "SOL": {"leverage": 300},
    "PEPE": {"leverage": 300},
    "BTC": {"leverage": 500},
    "ETH": {"leverage": 500},
}

current_margin = 100

# ==== –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ MEXC ====
def get_price(symbol):
    try:
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

# ==== –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É ====
def generate_signal(symbol, price):
    direction = "LONG" if price % 2 > 1 else "SHORT"
    entry_price = price
    sl = round(entry_price * (0.98 if direction == "LONG" else 1.02), 5)
    tp = round(entry_price * (1.05 if direction == "LONG" else 0.95), 5)
    leverage = coins[symbol]["leverage"]
    signal = (
        f"üìä –†–µ–∞–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ {direction}\n"
        f"–ú–æ–Ω–µ—Ç–∞: {symbol}/USDT\n"
        f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_price}\n"
        f"Stop Loss: {sl}\n"
        f"Take Profit: {tp}\n"
        f"–ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ: {leverage}√ó\n"
        f"–ú–∞—Ä–∂–∞: ${current_margin}"
    )
    return signal

# ==== –ö–æ–º–∞–Ω–¥–∏ ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]]
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def change_margin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 150")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_margin
    text = update.message.text
    if text.isdigit():
        current_margin = int(text)
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞ –º–∞—Ä–∂–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${current_margin}")
    elif text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        prices = []
        for coin in coins:
            price = get_price(coin)
            if price:
                prices.append(f"{coin}/USDT = {price}")
        await update.message.reply_text("\n".join(prices))
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")

# ==== –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ====
async def check_market(app):
    while True:
        try:
            for coin in coins:
                price = get_price(coin)
                if price:
                    signal = generate_signal(coin, price)
                    await app.bot.send_message(chat_id=CHAT_ID, text=signal)
            print("‚úÖ –°–∏–≥–Ω–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–∏–Ω–∫—É: {e}")
        await asyncio.sleep(600)

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
import asyncio
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    keep_alive()  # –í–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render

    asyncio.create_task(check_market(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
