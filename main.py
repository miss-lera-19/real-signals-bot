
import logging
import os
import asyncio
import aiohttp
import time
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from keep_alive import keep_alive

# –ó–º—ñ–Ω–Ω—ñ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
MEXC_API_KEY = os.environ.get("MEXC_API_KEY")
MEXC_SECRET_KEY = os.environ.get("MEXC_SECRET_KEY")

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
user_settings = {
    "margin": 100,
    "leverage": {
        "SOL": 300,
        "PEPE": 300,
        "BTC": 500,
        "ETH": 500
    }
}
coins = ["SOL", "PEPE", "BTC", "ETH"]

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ MEXC API
async def get_price(symbol: str) -> float:
    url = f"https://contract.mexc.com/api/v1/contract/ticker?symbol={symbol}_USDT"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                data = await response.json()
                return float(data["data"]["lastPrice"])
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ {symbol}: {e}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É
async def generate_signal(symbol: str) -> str:
    price = await get_price(symbol)
    if price is None:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}"

    margin = user_settings["margin"]
    leverage = user_settings["leverage"].get(symbol, 100)

    direction = "LONG" if int(time.time()) % 2 == 0 else "SHORT"
    entry = round(price, 5)
    sl = round(entry * (0.99 if direction == "LONG" else 1.01), 5)
    tp = round(entry * (1.03 if direction == "LONG" else 0.97), 5)

    return (
        f"üìà –†–µ–∞–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª {symbol}/USDT
"
        f"–ù–∞–ø—Ä—è–º: {direction}
"
        f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry}
"
        f"Stop Loss: {sl}
"
        f"Take Profit: {tp}
"
        f"–ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ: {leverage}√ó
"
        f"–ú–∞—Ä–∂–∞: ${margin}"
    )

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", callback_data="change_margin")],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", callback_data="change_leverage")],
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add_coin")],
        [InlineKeyboardButton("–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑", callback_data="current_prices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π ‚úÖ", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "change_margin":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200):")
        context.user_data["action"] = "change_margin"

    elif query.data == "change_leverage":
        await query.edit_message_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É —Ç–∞ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL 400):")
        context.user_data["action"] = "change_leverage"

    elif query.data == "add_coin":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏, —è–∫—É —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏:")
        context.user_data["action"] = "add_coin"

    elif query.data == "current_prices":
        msg = ""
        for coin in coins:
            price = await get_price(coin)
            if price:
                msg += f"{coin}: ${price}\n"
            else:
                msg += f"{coin}: –ø–æ–º–∏–ª–∫–∞\n"
        await query.edit_message_text(f"üìä –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n{msg}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    action = context.user_data.get("action")

    if action == "change_margin":
        try:
            user_settings["margin"] = int(text)
            await update.message.reply_text(f"–ú–∞—Ä–∂—É –æ–Ω–æ–≤–ª–µ–Ω–æ: ${text}")
        except:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["action"] = None

    elif action == "change_leverage":
        try:
            coin, lev = text.upper().split()
            user_settings["leverage"][coin] = int(lev)
            await update.message.reply_text(f"–ü–ª–µ—á–µ –¥–ª—è {coin} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {lev}√ó")
        except:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: SOL 300")
        context.user_data["action"] = None

    elif action == "add_coin":
        coin = text.upper()
        if coin not in coins:
            coins.append(coin)
            user_settings["leverage"][coin] = 100
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ")
        else:
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin} –≤–∂–µ —î")
        context.user_data["action"] = None

# –¶–∏–∫–ª –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
async def signal_loop(app):
    bot = Bot(BOT_TOKEN)
    while True:
        for coin in coins:
            signal = await generate_signal(coin)
            await bot.send_message(chat_id=CHAT_ID, text=signal)
        await asyncio.sleep(600)

# –ó–∞–ø—É—Å–∫
async def main():
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("prices", button_handler))
    app.add_handler(MessageHandler(None, handle_message))
    asyncio.create_task(signal_loop(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
