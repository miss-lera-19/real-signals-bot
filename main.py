import logging
import asyncio
import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425
MEXC_API_KEY = "mx0vglwSqWMNfUkdXo"
MEXC_SECRET_KEY = "7107c871e7dc4e3db79f4fddb07e917d"

# –°—Ç–∞—Ä—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
user_state = {
    "margin": 100,
    "leverage": {"SOL": 300, "PEPE": 300, "BTC": 500, "ETH": 500}
}
available_coins = ["SOL", "PEPE", "BTC", "ETH"]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ"], ["–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏ üìà", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–∞—Ä–∂—É –≤ $ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120)")
        context.user_data["change_margin"] = True
    elif text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–Ω–µ—Ç—É —ñ –Ω–æ–≤–µ –ø–ª–µ—á–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL 200)")
        context.user_data["change_leverage"] = True
    elif text == "–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: NEWCOIN")
        context.user_data["add_coin"] = True
    elif text == "–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑":
        prices = get_all_prices()
        if prices:
            message = "
".join([f"{coin}: {price} USDT" for coin, price in prices.items()])
        else:
            message = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ ‚ùå"
        await update.message.reply_text(message)
    elif context.user_data.get("change_margin"):
        try:
            new_margin = float(text)
            user_state["margin"] = new_margin
            await update.message.reply_text(f"–ú–∞—Ä–∂–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: ${new_margin}")
        except:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        context.user_data["change_margin"] = False
    elif context.user_data.get("change_leverage"):
        try:
            coin, lev = text.split()
            lev = int(lev)
            user_state["leverage"][coin.upper()] = lev
            await update.message.reply_text(f"–ü–ª–µ—á–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {coin.upper()}: {lev}√ó")
        except:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: SOL 200")
        context.user_data["change_leverage"] = False
    elif context.user_data.get("add_coin"):
        coin = text.upper()
        if coin not in available_coins:
            available_coins.append(coin)
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—É {coin} –¥–æ–¥–∞–Ω–æ ‚úÖ")
        else:
            await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {coin} –≤–∂–µ —î")
        context.user_data["add_coin"] = False
    else:
        await update.message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –∑ MEXC
def get_price(symbol):
    url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}USDT"
    try:
        response = requests.get(url, timeout=10)
        return float(response.json()["price"])
    except:
        return None

# –¶—ñ–Ω–∏ –Ω–∞ –≤—Å—ñ –º–æ–Ω–µ—Ç–∏
def get_all_prices():
    prices = {}
    for coin in available_coins:
        price = get_price(coin)
        if price:
            prices[coin] = price
    return prices

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É LONG/SHORT
async def check_signals(app):
    while True:
        try:
            for coin in available_coins:
                price = get_price(coin)
                if not price:
                    continue
                lev = user_state["leverage"].get(coin, 100)
                margin = user_state["margin"]
                position_size = round(margin * lev / price, 2)
                sl = round(price * 0.99, 4)
                tp = round(price * 1.02, 4)
                direction = "LONG" if int(price) % 2 == 0 else "SHORT"
                text = (
                    f"üì¢ –†–µ–∞–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª ({direction}) –ø–æ {coin}:
"
                    f"üí∞ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {price} USDT
"
                    f"üéØ Take Profit: {tp} USDT
"
                    f"üõ° Stop Loss: {sl} USDT
"
                    f"üíµ –ü–ª–µ—á–µ: {lev}√ó
"
                    f"üìä –ú–∞—Ä–∂–∞: ${margin}
"
                    f"üìà –û–± º—î–º: {position_size} {coin}"
                )
                await app.bot.send_message(chat_id=CHAT_ID, text=text)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}")
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    asyncio.create_task(check_signals(app))
    await app.run_polling()

if __name__ == "__main__":
    import keep_alive
    keep_alive.keep_alive()
    asyncio.run(main())