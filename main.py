import logging
import os
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from keep_alive import keep_alive

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
BOT_TOKEN = "8441710554:AAGFDgaFwQpcx3bFQ-2FgjjlkK7CEKxmz34"
CHAT_ID = 681357425

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# === –ö–Ω–æ–ø–∫–∏ ===
keyboard = [
    [InlineKeyboardButton("–¶—ñ–Ω–∏ –∑–∞—Ä–∞–∑", callback_data="prices")],
    [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä–∂—É", callback_data="change_margin")],
    [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–µ—á–µ", callback_data="change_leverage")],
    [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add_coin")],
]
reply_markup = InlineKeyboardMarkup(keyboard)

# === /start –∫–æ–º–∞–Ω–¥–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.", reply_markup=reply_markup)

# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "prices":
        await query.edit_message_text(text="üîÑ –û—Ç—Ä–∏–º—É—é —Ü—ñ–Ω–∏... (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–∑–Ω—ñ—à–µ)")
    elif action == "change_margin":
        await query.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∂—É:")
    elif action == "change_leverage":
        await query.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–ª–µ—á–µ:")
    elif action == "add_coin":
        await query.edit_message_text(text="–í–≤–µ–¥—ñ—Ç—å –º–æ–Ω–µ—Ç—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:")
    else:
        await query.edit_message_text(text="–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# === –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
async def main():
    keep_alive()
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
